kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-token-helper
rules:
  - apiGroups: [""]
    resources:
      - secrets
      - serviceaccounts
      - serviceaccounts/token
    verbs:
      - 'delete'
      - 'create'
      - 'patch'
      - 'get'
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-token-helper
subjects:
  - kind: ServiceAccount
    name: sa-ecr-token-helper
roleRef:
  kind: Role
  name: ecr-token-helper
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-ecr-token-helper
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-token-helper
spec:
  schedule: '0/5 * * * *'
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sa-ecr-token-helper
          containers:
            - command:
                - /bin/sh
                - -c
                - |-
                  echo "get token"
                  TOKEN=$(aws ecr get-login-password --region ${AWS_REGION} | cut -d' ' -f6)
                  echo "delete secrete"
                  kubectl delete secret -n default --ignore-not-found ${SECRET_NAME}
                  echo "create token"
                  kubectl create secret -n default docker-registry ${SECRET_NAME} \
                  --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password=$TOKEN \
                  --namespace=default
                  kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'${SECRET_NAME}'"}]}' -n default
                  echo "token created" 
              env:
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: emoj-secret
                      key: aws.secretaccesskey
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: emoj-secret
                      key: aws.keyid
                - name: AWS_ACCOUNT
                  valueFrom:
                    secretKeyRef:
                      name: emoj-secret
                      key: aws.account
                - name: SECRET_NAME
                  valueFrom:
                    secretKeyRef:
                      name: emoj-secret
                      key: aws.secret
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: emoj-secret
                      key: aws.region
                - name: ECR_REPOSITORY
                  value: 
              image: odaniait/aws-kubectl:latest
              imagePullPolicy: IfNotPresent
              name: ecr-token-helper
          restartPolicy: Never